import streamlit as st
import pandas as pd
import plotly.express as px

@st.cache_data
def charger_bdd():
    return pd.read_csv("agribalyse-31-detail-par-etape.csv")

def etapes_panier():
    st.header("Analyse des √©tapes du panier")

    # V√©rification du panier
    if "panier" not in st.session_state or not st.session_state.panier:
        st.warning("Ajoutez des produits pour voir l'analyse.")
        return

    codes_ciqual_panier = [int(produit["code_ciqual"]) for produit in st.session_state.panier]

    # Charger la BDD √©tapes
    df_agribalyse = charger_bdd()

    if "Code CIQUAL" not in df_agribalyse.columns:
        st.error("Erreur : La colonne 'Code CIQUAL' est introuvable dans la BDD.")
        return

    # Filtrer la BDD pour ne garder que les produits du panier
    df_panier = df_agribalyse[df_agribalyse["Code CIQUAL"].isin(codes_ciqual_panier)]

    if df_panier.empty:
        st.warning("Aucun des produits du panier ne correspond √† la BDD √©tapes.")
        return

    # S√©lection de l'√©tape
    etapes = ["Agriculture", "Transformation", "Emballage", "Transport", "Supermarch√© et distribution", "Consommation"]
    etape_selectionnee = st.selectbox("S√©lectionnez une √©tape √† afficher :", etapes)

    # Filtrer les colonnes contenant l'√©tape s√©lectionn√©e
    colonnes_etape = [col for col in df_agribalyse.columns if etape_selectionnee in col]

    if not colonnes_etape:
        st.error(f"Aucune colonne trouv√©e pour l'√©tape '{etape_selectionnee}'.")
        return

    # Convertir en num√©rique
    df_panier[colonnes_etape] = df_panier[colonnes_etape].apply(pd.to_numeric, errors="coerce")

    # Somme des valeurs du panier pour l'√©tape s√©lectionn√©e
    somme_valeurs_panier = df_panier[colonnes_etape].sum().sum()

    # R√©cup√©ration des sous-groupes des produits du panier
    sous_groupes_panier = df_panier["Sous-groupe d'aliment"]

    # Moyennes des sous-groupes pour les colonnes de l'√©tape s√©lectionn√©e
    moyennes_sous_groupes = df_agribalyse.groupby("Sous-groupe d'aliment")[colonnes_etape].mean()

    # Calcul de la somme des moyennes en tenant compte des r√©p√©titions
    somme_moyennes_sous_groupes = sum(moyennes_sous_groupes.loc[sous_groupe].sum() for sous_groupe in sous_groupes_panier)

    # Affichage des r√©sultats
    st.subheader(f"Analyse pour l'√©tape : {etape_selectionnee}")
    st.write(f"üîπ **Somme des valeurs du panier** : {somme_valeurs_panier:.2f}")
    st.write(f"üîπ **Somme des moyennes des sous-groupes** : {somme_moyennes_sous_groupes:.2f}")

    # Comparaison sous forme d'histogramme (Graphique 1)
    data_plot = pd.DataFrame({
        "Cat√©gorie": ["Somme des valeurs du panier", "Somme des moyennes des sous-groupes"],
        "Valeur": [somme_valeurs_panier, somme_moyennes_sous_groupes]
    })

    fig = px.bar(data_plot, x="Cat√©gorie", y="Valeur", title=f"Comparaison pour {etape_selectionnee}", color="Cat√©gorie")
    st.plotly_chart(fig)

    # --------------------------
    # üîΩ Graphique 2 : Indicateur sp√©cifique
    # --------------------------

    impacts = [
        "Score unique EF", "Changement climatique", "Appauvrissement de la couche d'ozone",
        "Rayonnements ionisants", "Formation photochimique d'ozone", "Particules fines - Agriculture",
        "Effets toxicologiques sur la sant√© humaine : substances non-canc√©rog√®nes",
        "Effets toxicologiques sur la sant√© humaine : substances canc√©rog√®nes",
        "Acidification terrestre et eaux douces", "Eutrophisation eaux douces",
        "Eutrophisation marine", "Eutrophisation terrestre",
        "√âcotoxicit√© pour √©cosyst√®mes aquatiques d'eau douce", "Utilisation du sol",
        "√âpuisement des ressources eau", "√âpuisement des ressources √©nerg√©tiques",
        "√âpuisement des ressources min√©raux", "Changement climatique - √©missions biog√©niques",
        "Changement climatique - √©missions fossiles",
        "Changement climatique - √©missions li√©es au changement d'affectation des sols"
    ]

    unites = {
        'Score unique EF': 'sans unit√©',
        'Changement climatique': 'kg CO2 eq/kg',
        "Appauvrissement de la couche d'ozone": 'kg CVC11 eq/kg',
        "Rayonnements ionisants": 'kBq U-235 eq/kg',
        "Formation photochimique d'ozone": 'kg NMVOC eq/kg',
        "Particules fines - Agriculture": 'disease inc./kg',
        "Effets toxicologiques sur la sant√© humaine : substances non-canc√©rog√®nes": 'kg Sb eq/kg',
        "Effets toxicologiques sur la sant√© humaine : substances canc√©rog√®nes": 'kg Sb eq/kg',
        "Acidification terrestre et eaux douces": 'mol H+ eq/kg',
        "Eutrophisation eaux douces": 'kg P eq/kg',
        "Eutrophisation marine": 'kg N eq/kg',
        "Eutrophisation terrestre": 'mol N eq/kg',
        "√âcotoxicit√© pour √©cosyst√®mes aquatiques d'eau douce": 'CTUe/kg',
        "Utilisation du sol": 'Pt/kg',
        "√âpuisement des ressources eau": 'm3 depriv./kg',
        "√âpuisement des ressources √©nerg√©tiques": 'MJ/kg',
        "√âpuisement des ressources min√©raux": 'kg Sb eq/kg',
        "Changement climatique - √©missions biog√©niques": 'kg CO2 eq/kg',
        "Changement climatique - √©missions fossiles": 'kg CO2 eq/kg',
        "Changement climatique - √©missions li√©es au changement d'affectation des sols": 'kg CO2 eq/kg',
    }

    st.subheader("Analyse d√©taill√©e par indicateur")

    impact_selectionne = st.selectbox("S√©lectionnez un indicateur d‚Äôimpact environnemental :", impacts)

    # Trouver la colonne correspondant √† l'√©tape et √† l'indicateur
    colonnes_match = [col for col in df_agribalyse.columns if etape_selectionnee in col and impact_selectionne in col]
    if not colonnes_match:
        st.error(f"Aucune donn√©e disponible pour l'√©tape '{etape_selectionnee}' et l'indicateur '{impact_selectionne}'.")
        return

    colonne = colonnes_match[0]

    # Convertir la colonne en num√©rique
    df_panier[colonne] = pd.to_numeric(df_panier[colonne], errors="coerce")

    # Moyenne brute du panier pour cet indicateur
    moyenne_panier = df_panier[colonne].mean()

    # Moyenne pond√©r√©e des sous-groupes
    moyennes_sous_groupes = df_agribalyse.groupby("Sous-groupe d'aliment")[colonne].mean()
    occurrences_sous_groupes = sous_groupes_panier.value_counts()
    somme_ponderee = sum(moyennes_sous_groupes.get(sg, 0) * count for sg, count in occurrences_sous_groupes.items())
    moyenne_ponderee = somme_ponderee / occurrences_sous_groupes.sum()

    # Affichage
    unite = unites.get(impact_selectionne, "unit√© inconnue")

    st.write(f"üîπ **Moyenne du panier pour** *{impact_selectionne}* : {moyenne_panier:.4f} {unite}")
    st.write(f"üîπ **Moyenne pond√©r√©e des sous-groupes** : {moyenne_ponderee:.4f} {unite}")

    # Deuxi√®me graphique
    data_plot2 = pd.DataFrame({
        "Cat√©gorie": ["Moyenne du panier", "Moyenne pond√©r√©e des sous-groupes"],
        "Valeur": [moyenne_panier, moyenne_ponderee]
    })

    fig2 = px.bar(data_plot2, x="Cat√©gorie", y="Valeur", title=f"{impact_selectionne} - {etape_selectionnee}", color="Cat√©gorie")
    st.plotly_chart(fig2)
